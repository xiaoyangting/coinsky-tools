import Head from 'next/head'
// import Image from 'next/image'
import Image from '../../components/Image'
import Londing from '../../components/Londing'
import { Button, Input, Select } from 'antd'

import Header from '../../components/Header'
import Footer from '../../components/Footer'
import ToolsTitle, { SmallToolsTitle } from '../../components/ToolsTitle'

import style from './index.module.scss'
import Request from '../../utils/fetch'
import { useState } from 'react'
import { getDate } from '../../utils/date'
import { stringInterception } from '../../utils/string'

const { Option } = Select;

export default function WalletQuery({ walletAuthSetting }) {
  const [chain, setChain] = useState(walletAuthSetting[0].chain)
  const [address, setAddress] = useState('')
  const [authorizationList, setAuthorizationList] = useState([])
  const [isLonding, setIsLonding] = useState(false)

  const query = async () => {
    setIsLonding(true)
    const res = await Request('/queryWalletAuth.json', {
      body: {
        chain,
        address
      }
    })
    setAuthorizationList(res)
    setIsLonding(false)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <main className='page_tools_bj'>
        {/* 页面头部 */}
        <Header />

        <div className="container">
          <div className={style.wallet_query_authorization}>

            {/* 页面大小标题 */}
            <ToolsTitle title="Wallet Authorisation Search" />
            <SmallToolsTitle title="Check which contracts have been authorised at your wallet address and cancel expired or untrusted authorisations in time to keep your wallet safe!" />

            <div className="wallet_query">
              <div className='authorization_query'>

                <Select
                  dropdownClassName={style.select_dropdown}
                  value={ chain }
                  showArrow={false}
                  onChange={ (value) => setChain(value)}
                >
                  {
                    walletAuthSetting.map((item) => {
                      return (
                        <Option value={ item.chain } key={item.chain}>
                          <Image src={ item.icon } width={16} height={16} alt="" />
                          <span>{ item.name } </span>
                        </Option>
                      )
                    })
                  }
                </Select>

                <Input
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  placeholder='Please enter your wallet address to search'
                />
                <Button type="primary" shape="round" onClick={query}>Enquiry</Button>
              </div>

              <div className="hint">Very secure! The current wallet address is not authorized for any contract!</div>

              {/* 授权结果 */}
              <Authorization authorizationList={authorizationList} />
            </div>

          </div>
        </div>
        {isLonding && <Londing />}
      </main>

      
      <footer>
        <Footer />
      </footer>
    </>
  )
}

function Authorization({authorizationList}) {
  
  return (
    <div className="query_result">
      {
        authorizationList.length > 0 && 
        <div className="wallet_hint">
        <Image src='/svg/hint.svg' width={16} height={20} alt="" />
        <p>
          CoinSky only provides query function, it is not associated with your wallet in any way, to cancel authorization please do it yourself in your wallet!
        </p>
      </div>
      }

      <div className="authorized_list">
        {
          authorizationList.map((item, index) => {
            return (
              <div className="item" key={item.token + index}>
                <div className="item_header">
                  <div className="user_info">
                    <Image src={item.icon} width={30} height={30} alt="" />
                    <div className="user_name">{item.name}</div>
                  </div>
                  <div className={ item.risk === 1 ? 'pisks_success' : 'pisks_error'}>Risks: { item.risk === 1 ? 'LOW' : 'HIGHT'}</div>
                </div>
                
                <div className="item_content">
                  <div className='content'>
                    Authorized Contracts: <span className='contracts'>{ stringInterception(item.contract, 11, 10 ) }</span>
                  </div>
                  <div className='content'>
                    Authorized Token: <span className='token'>{ stringInterception(item.token, 11, 10 )}</span>
                  </div>
                  <div className='content'>
                    Authorized Date: <span>{ getDate(item.timestamp) }(UTC)</span>
                  </div>
                  <div className='content'>
                    Authorized Number: <span>{ item.allowwance }</span>
                  </div>
                </div>
              </div>
            )
          })
        }
      </div>
    </div>
  )
}

export async function getServerSideProps(context) {
  const walletAuthSetting = await Request('/walletAuthSetting.json')

  return {
    props: {
      walletAuthSetting
    }
  }
}
