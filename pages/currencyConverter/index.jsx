import Head from 'next/head'
import { createRef, useEffect, useState } from 'react';
import { Select } from 'antd';
import Header from '../../components/Header'
import Footer from '../../components/Footer'
import PageTitle, { SmallToolsTitle } from '../../components/ToolsTitle'
import NumberInput from '../../components/Input/NumberInput'
import Image from '../../components/Image'

import styles from "./currencyConverter.module.scss";
import Request from '../../utils/fetch';

const { Option } = Select;

export default function CurrencyConverter({ currencyConvertList }) {
  console.log(currencyConvertList)
    // 请求货币列表参数
  var page_size = 20
  var page_no = 1
  const [currencyData, setCurrencyData] = useState(currencyConvertList.items)
  const [presentCurrency, setPresentCurrency] = useState({
    type: 0,
    value: 0,
    ...currencyData[0]
  }) // 当前货币
  const [targetCurrency, setTargetCurrency] = useState({
    type: 1,
    value: 0,
    ...currencyData[1]
  }) // 目标货币
  // 计算转换
  const onChangeInput = (inputObj) => {
    const { value, currencytype } = inputObj
    if (currencytype.type) { // 为 1 时 计算 当前货币
      setTargetCurrency({...targetCurrency, value})
      setPresentCurrency((presentCurrency) => {
        var strArr = value.split(",")
        var newValue = strArr.join('')
        return {
          ...presentCurrency,
          value: (parseFloat(newValue) * targetCurrency.price) / presentCurrency.price
        }
      })
    } else { // 为 0 时 计算 目标货币
      setPresentCurrency({ ...presentCurrency, value })
      setTargetCurrency((targetCurrency) => {
        var strArr = value.split(",")
        var newValue = strArr.join('')
        return {
          ...targetCurrency,
          value: (parseFloat(newValue) * presentCurrency.price) / targetCurrency.price
        }
      })
    }
  }
  // 更改选中货币
  const onChangeSelect = (SelectObj) => {
    SelectObj.type ?
      setTargetCurrency((targetCurrency) => ({...targetCurrency, ...SelectObj})) :
      setPresentCurrency((presentCurrency) => ({...presentCurrency, ...SelectObj}))
  }

  const onSearch = () => {

  }
  const getCurrencyConvertList = async (params, isPush) => {
    const currencyConvertList = await Request('/h5/getH5CurrencyConvertList.json', {
      body: {
        page_no: ++page_no,
        page_size,
        ...params
      }
    })
    // 计算法币 美元兑换率
    var currencyList = currencyConvertList.map((item) => {
      if (parseInt(item.is_currency) === 1) {
        item.price = 1 / item.price
      }
      return item
    })
    // 判断是否加载多
    if (!isPush) { // 不是 则覆盖
      setCurrencyData(currencyList)
    } else {
      // 是 则合并
      setCurrencyData([...currencyData, ...currencyList])
    }
  }

  return (
    <>
      {/* 对于html 头部 */}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* 内容 */}
      <main className={`${styles.currency_converter_page} page_tools_bj`} >
        {/* 页面头部内容 */}
        <Header />
        {/* 页面内容 */}
        <div className="currency_converter_content">
          <PageTitle title="Wallet Authorisation Search" />

          <div className="currency_converter_box">
            {/* 小标题 与 重置按钮 */}
            <div className="currency_converter_box_title_reset_btn">
              <SmallToolsTitle title="Data provided by coinsky，2022/02/25 Update" />
              <div className="reset_btn">
                <Image src="/svg/reset.svg" width={12} height={12} alt="CoinSky"></Image>
                <span>Refresh</span>
              </div>
            </div>
            {/* 货币计算结果 */}
            <div className="currency_text">
              <span className='currency_num' style={{ marginLeft: '0' }}>0</span>
              <span className='currency_type'>Bitcoin (BTC)</span>
              <span>=</span>
              <span className='currency_num'>0</span>
              <span className='currency_type'>United States Dollar“$”(USD)</span>
            </div>
            {/* 货币选择器 */}
            <div className="converter_box">
              <ConverterRow
                currencyData={currencyData}
                currencytype={presentCurrency}
                onChangeInput={onChangeInput}
                onChangeSelect={onChangeSelect}
              >
                <NumberInput onChangeInput={onChangeInput} currencytype={presentCurrency} />
              </ConverterRow>
              <ConverterRow
                currencyData={currencyData}
                currencytype={targetCurrency}
                onChangeInput={onChangeInput}
                onChangeSelect={onChangeSelect}
                style={{ marginTop: '2.75rem' }}
              >
                  <NumberInput onChangeInput={onChangeInput} currencytype={targetCurrency} />
              </ConverterRow>
            </div>

          </div>
        </div>

        <Footer />
      </main>
    </>
  )
}

// 货币选择器 与 输入框模块
function ConverterRow(props) {
  const { children, style, currencyData, onChangeSelect, currencytype } = props
  const selectRef = createRef()
  const OptionStyle = {
    height: '46px',
    // backgroundColor: '#fff',
    display: 'flex',
    alignItems: 'center'
  }
  const onChange = (value, {item}) => {
    console.log(item);
    selectRef.current.blur()
    onChangeSelect({
      ...currencytype,
      ...item
    })
    console.log(`selected ${value}`);
  }

  var search = ''
  var timer
  var isSearchLoader = false
  const onSearch = (val) => {
    search = val
    clearTimeout(timer);
    isSearchLoader = false
    timer = setTimeout(() => {
      var params = {
        name: search
      }
      isSearchLoader = true
      // page_no = 0
      
    console.log(val)
      // getCurrencyConvertLis(params)
    }, 1000)
  }

  var scrollBottomValve = false
  // 滚动监听
  const scrollChange = (e) => {
    const { target } = e;
    if (target.scrollTop + target.offsetHeight >= target.scrollHeight - 100) {
      var params = {
      }
      if (search) {
        params.name = this.search
      } else {
        page_no = 0
        return
      }
      // if (!scrollBottomValve) {
      //   scrollBottomValve = true
      //   etCurrencyConvertLis(params, true)
      // }
    }
  }

  return (
    <>
      <div className="converter_row" style={style}>
        <Select
          ref={selectRef}
          value={currencytype.coin_id}
          className='converter_Select'
          showSearch
          placeholder="Select a person"
          optionFilterProp="children"
          onChange={onChange}
          onSearch={onSearch}
          filterOption={(input, option) => {
            // console.log(input, option)
          }}
          onPopupScroll={scrollChange}
        >
          {
            currencyData.map((item, index) => {
              return (
                <Option
                  style={OptionStyle}
                  value={item.coin_id}
                  key={`${item.currency_code}${index}`}
                  item={item}
                >
                  <div className={styles.converter_Select_Option}>
                    <Image src={item.icon} width={16} height={16} alt="" />

                    <div className="converter_row_left_text">
                      <span className='currency_name'>{item.fullname}</span>
                      <span>({item.name})</span>
                    </div>
                  </div>
                </Option>
              )
            })
          }
        </Select>
        <div className="converter_input">
          {children}
        </div>
      </div>
    </>
  )
}


export async function getServerSideProps(context) {
  const currencyConvertList = await Request('/h5/getH5CurrencyConvertList.json', {
    body: {
      page_no: 1,
      page_size: 20
    }
  })
  currencyConvertList.items[0].coin_id = currencyConvertList.items[0].currency_code
  // currencyConvertList.items[0].price = 1

  return {
    props: {
      currencyConvertList
    }
  }
}